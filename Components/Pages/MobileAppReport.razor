@page "/mobile-app-report"
@rendermode InteractiveServer
@using ReportBuilder.Models
@using ReportBuilder.Services
@inject IJSRuntime JSRuntime

<PageTitle>Mobile App Store Performance Report</PageTitle>

<!-- Hidden File Inputs -->
<InputFile id="pdfFileInput" OnChange="HandlePdfImport" accept=".pdf" style="display: none;" />
<InputFile id="jsonFileInput" OnChange="ImportJson" accept=".json" style="display: none;" />

<!-- Floating Action Button Menu -->
<div class="fab-container">
    @if (isFabMenuOpen)
    {
        <div class="fab-backdrop" @onclick="ToggleFabMenu"></div>
    }

    <div class="fab-menu @(isFabMenuOpen ? "open" : "")">
        <FABMenuItem Icon="✕" Label="Clear Form" Title="Clear Form" CssClass="fab-menu-clear" OnClick="@ClearForm" />

        <FABMenuItem Icon="⬆" Label="Export JSON" Title="Export JSON" CssClass="fab-menu-export" OnClick="@ExportConfig" />

        <FABMenuItem Icon="⬇" Label="Import JSON" Title="Import JSON" CssClass="fab-menu-import-json" OnClick="@TriggerJsonUpload" IsDisabled="@isImporting" />

        <FABMenuItem CssClass="fab-menu-import-pdf" OnClick="@TriggerPdfUpload" IsDisabled="@isImporting" Title="Import PDF">
            @if (isImporting)
            {
                <span class="fab-icon spinner-border spinner-border-sm"></span>
                <span class="fab-label">Importing...</span>
            }
            else
            {
                <span class="fab-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="20" height="20">
                        <path d="M14 2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V8l-6-6zm4 18H6V4h7v5h5v11z"/>
                        <path d="M8 14h8v2H8v-2zm0-3h8v2H8v-2z"/>
                    </svg>
                </span>
                <span class="fab-label">Import PDF</span>
            }
        </FABMenuItem>
    </div>

    <button type="button" class="fab-button @(isFabMenuOpen ? "open" : "")" @onclick="ToggleFabMenu">
        <span class="fab-button-icon">@(isFabMenuOpen ? "×" : "+")</span>
    </button>
</div>

<div style="max-width: 1600px; margin: 0 auto;">
    <div style="margin-bottom: 2rem;">
        <h1 style="margin-bottom: 0.5rem;">Mobile App Store Performance Report</h1>
        <p style="color: var(--text-secondary); font-size: 1rem;">Generate comprehensive PDF reports with customizable metrics and comparisons</p>
    </div>

    <AlertMessage Message="@importMessage" IsSuccess="@importSuccess" />

    <ImportDialog
        IsVisible="@showImportDialog"
        OnImportToPrevious="@ImportToPreviousPeriod"
        OnImportToCurrent="@ImportToCurrentPeriod"
        OnCancel="@CancelImport" />

    <EditForm Model="@config" OnValidSubmit="GenerateReport">
        <div class="row">
            <div class="col-md-12">
                <!-- General Information Section -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">General Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="row align-inputs-bottom">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Company Name</label>
                                    <InputText @bind-Value="config.CompanyName" class="form-control" placeholder="e.g., My Company" />
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="mb-3">
                                    <label class="form-label">Report Month</label>
                                    <InputNumber TValue="int?" @bind-Value="config.ReportMonth" class="form-control" placeholder="@DateTime.Now.Month.ToString()" />
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="mb-3">
                                    <label class="form-label">Report Day</label>
                                    <InputNumber TValue="int?" @bind-Value="config.ReportDay" class="form-control" placeholder="@DateTime.Now.Day.ToString()" />
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="mb-3">
                                    <label class="form-label">Report Year</label>
                                    <InputNumber TValue="int?" @bind-Value="config.ReportYear" class="form-control" placeholder="@DateTime.Now.Year.ToString()" />
                                </div>
                            </div>
                        </div>
                        <div class="row align-inputs-bottom">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Created By Name</label>
                                    <InputText @bind-Value="config.CreatedByName" class="form-control" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Created By Title</label>
                                    <InputText @bind-Value="config.CreatedByTitle" class="form-control" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-check mb-3">
                                    <InputCheckbox @bind-Value="config.IncludeLastPeriodData" class="form-check-input" id="includeLastPeriod" />
                                    <label class="form-check-label" for="includeLastPeriod">
                                        <strong>Include Last Period Data & Comparisons</strong> (enables comparison fields and % change calculations across all sections)
                                    </label>
                                </div>
                            </div>
                        </div>
                        @if (config.IncludeLastPeriodData)
                        {
                            <div class="row align-inputs-bottom">
                                <div class="col-md-2">
                                    <div class="mb-3">
                                        <label class="form-label">Last Report Month</label>
                                        <InputNumber TValue="int?" @bind-Value="config.LastReportMonth" class="form-control" placeholder="9" />
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="mb-3">
                                        <label class="form-label">Last Report Day</label>
                                        <InputNumber TValue="int?" @bind-Value="config.LastReportDay" class="form-control" placeholder="22" />
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="mb-3">
                                        <label class="form-label">Last Report Year</label>
                                        <InputNumber TValue="int?" @bind-Value="config.LastReportYear" class="form-control" placeholder="2025" />
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Section Toggles -->
                <div class="card mb-4">
                    <div class="card-header bg-secondary text-white">
                        <h5 class="mb-0">Report Sections</h5>
                    </div>
                    <div class="card-body">
                        <div class="form-check mb-2">
                            <InputCheckbox @bind-Value="config.IncludeExecutiveSummary" class="form-check-input" id="execSummary" />
                            <label class="form-check-label" for="execSummary">
                                Include Executive Summary
                            </label>
                        </div>
                        <div class="form-check mb-2">
                            <InputCheckbox @bind-Value="config.IncludeIOSSection" class="form-check-input" id="iosSection" />
                            <label class="form-check-label" for="iosSection">
                                Include iOS Platform Performance
                            </label>
                        </div>
                        <div class="form-check mb-2">
                            <InputCheckbox @bind-Value="config.IncludeAndroidSection" class="form-check-input" id="androidSection" />
                            <label class="form-check-label" for="androidSection">
                                Include Android Platform Performance
                            </label>
                        </div>
                        <div class="form-check mb-2">
                            <InputCheckbox @bind-Value="config.IncludePlatformComparison" class="form-check-input" id="platformComp" />
                            <label class="form-check-label" for="platformComp">
                                Include Platform Comparison
                            </label>
                        </div>
                        <div class="form-check mb-2">
                            <InputCheckbox @bind-Value="config.IncludeTechnicalSpecifications" class="form-check-input" id="techSpecs" />
                            <label class="form-check-label" for="techSpecs">
                                Include Technical Specifications
                            </label>
                        </div>
                    </div>
                </div>

                <!-- Executive Summary Section -->
                @if (config.IncludeExecutiveSummary)
                {
                    <div class="card mb-4">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">Executive Summary</h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Summary Text</label>
                                <InputTextArea @bind-Value="config.ExecutiveSummary" class="form-control" rows="6" placeholder="Enter your executive summary here..."></InputTextArea>
                                <small class="form-text text-muted">Provide a brief overview of the key metrics and trends for this reporting period.</small>
                            </div>
                        </div>
                    </div>
                }

                <!-- iOS Metrics Section -->
                @if (config.IncludeIOSSection)
                {
                    <div class="card mb-4">
                        <div class="card-header bg-info text-white">
                            <h5 class="mb-0">iOS Platform Metrics</h5>
                        </div>
                        <div class="card-body">
                            <h6>Current Period</h6>
                            <div class="row align-inputs-bottom">
                                <div class="col-md-3">
                                    <div class="mb-3">
                                        <label class="form-label">Impressions</label>
                                        <InputNumber TValue="double?" @bind-Value="config.IOSMetrics.Impressions" class="form-control" />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="mb-3">
                                        <label class="form-label">Product Page Views</label>
                                        <InputNumber TValue="double?" @bind-Value="config.IOSMetrics.ProductPageViews" class="form-control" />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="mb-3">
                                        <label class="form-label">Conversion Rate</label>
                                        <InputNumber TValue="double?" @bind-Value="config.IOSMetrics.ConversionRate" class="form-control" />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="mb-3">
                                        <label class="form-label">Total Downloads</label>
                                        <InputNumber TValue="double?" @bind-Value="config.IOSMetrics.TotalDownloads" @bind-Value:after="OnDownloadSourceChanged" class="form-control" />
                                    </div>
                                </div>
                            </div>
                            <div class="row align-inputs-bottom">
                                <div class="col-md-3">
                                    <div class="mb-3">
                                        <label class="form-label">Daily Downloads</label>
                                        <InputNumber TValue="double?" @bind-Value="config.IOSMetrics.DailyDownloads" class="form-control" />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="mb-3">
                                        <label class="form-label">Sessions per Device</label>
                                        <InputNumber TValue="double?" @bind-Value="config.IOSMetrics.SessionsPerDevice" class="form-control" />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="mb-3">
                                        <label class="form-label">Crash Rate per Session</label>
                                        <InputNumber TValue="double?" @bind-Value="config.IOSMetrics.CrashRatePerSession" class="form-control" />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="mb-3">
                                        <label class="form-label">Total Crashes</label>
                                        <InputNumber TValue="double?" @bind-Value="config.IOSMetrics.TotalCrashes" class="form-control" />
                                    </div>
                                </div>
                            </div>

                            @if (config.IncludeLastPeriodData)
                            {
                                <h6 class="mt-4">Last Period (Optional - for comparison)</h6>
                                <div class="row align-inputs-bottom">
                                    <div class="col-md-3">
                                        <div class="mb-3">
                                            <label class="form-label">Impressions (Last)</label>
                                            <InputNumber TValue="double?" @bind-Value="config.IOSMetrics.ImpressionsLast" class="form-control" />
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mb-3">
                                            <label class="form-label">Product Page Views (Last)</label>
                                            <InputNumber TValue="double?" @bind-Value="config.IOSMetrics.ProductPageViewsLast" class="form-control" />
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mb-3">
                                            <label class="form-label">Conversion Rate (Last)</label>
                                            <InputNumber TValue="double?" @bind-Value="config.IOSMetrics.ConversionRateLast" class="form-control" />
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mb-3">
                                            <label class="form-label">Total Downloads (Last)</label>
                                            <InputNumber TValue="double?" @bind-Value="config.IOSMetrics.TotalDownloadsLast" class="form-control" />
                                        </div>
                                    </div>
                                </div>
                                <div class="row align-inputs-bottom">
                                    <div class="col-md-3">
                                        <div class="mb-3">
                                            <label class="form-label">Daily Downloads (Last)</label>
                                            <InputNumber TValue="double?" @bind-Value="config.IOSMetrics.DailyDownloadsLast" class="form-control" />
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mb-3">
                                            <label class="form-label">Sessions per Device (Last)</label>
                                            <InputNumber TValue="double?" @bind-Value="config.IOSMetrics.SessionsPerDeviceLast" class="form-control" />
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mb-3">
                                            <label class="form-label">Crash Rate per Session (Last)</label>
                                            <InputNumber TValue="double?" @bind-Value="config.IOSMetrics.CrashRatePerSessionLast" class="form-control" />
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mb-3">
                                            <label class="form-label">Total Crashes (Last)</label>
                                            <InputNumber TValue="double?" @bind-Value="config.IOSMetrics.TotalCrashesLast" class="form-control" />
                                        </div>
                                    </div>
                                </div>

                            }

                            <h6 class="mt-4">Download Sources</h6>
                            @if (HasDownloadSourceMismatch())
                            {
                                <div class="alert alert-warning d-flex align-items-center mb-3" role="alert">
                                    <svg class="warning-icon me-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 2L1 21h22L12 2zm0 3.5L19.5 19h-15L12 5.5zM11 10v4h2v-4h-2zm0 5v2h2v-2h-2z"/>
                                    </svg>
                                    <div>
                                        <strong>Warning:</strong> Download Sources total (@(GetDownloadSourcesTotal().ToString("N0"))) does not match Total Downloads (@((config.IOSMetrics.TotalDownloads ?? 0).ToString("N0")))
                                    </div>
                                </div>
                            }
                            <div class="form-check mb-3">
                                <InputCheckbox @bind-Value="config.ShowPercentBySource" class="form-check-input" id="showPercentBySource" />
                                <label class="form-check-label" for="showPercentBySource">
                                    Show Percent by Source in Report
                                </label>
                            </div>
                            <div class="row">
                            @for (int i = 0; i < config.IOSMetrics.DownloadSources.Count; i++)
                            {
                                var index = i;
                                <DownloadSourceCard
                                    Source="@config.IOSMetrics.DownloadSources[index]"
                                    IncludeLastPeriod="@config.IncludeLastPeriodData"
                                    OnRemove="@(() => RemoveDownloadSource(index))"
                                    OnValueChanged="@OnDownloadSourceChanged" />
                            }
                            </div>
                            <button type="button" class="btn btn-success mt-2" @onclick="AddDownloadSource">Add Download Source</button>
                        </div>
                    </div>
                }

                <!-- Android Metrics Section -->
                @if (config.IncludeAndroidSection)
                {
                    <div class="card mb-4">
                        <div class="card-header bg-success text-white">
                            <h5 class="mb-0">Android Platform Metrics</h5>
                        </div>
                        <div class="card-body">
                            <h6>Current Period</h6>
                            <div class="row align-inputs-bottom">
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Total Installs</label>
                                        <InputNumber TValue="double?" @bind-Value="config.AndroidMetrics.TotalInstalls" class="form-control" />
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Daily Downloads</label>
                                        <InputNumber TValue="double?" @bind-Value="config.AndroidMetrics.DailyDownloads" class="form-control" />
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Crash Rate per Session</label>
                                        <InputNumber TValue="double?" @bind-Value="config.AndroidMetrics.CrashRatePerSession" class="form-control" />
                                    </div>
                                </div>
                            </div>

                            @if (config.IncludeLastPeriodData)
                            {
                                <h6 class="mt-4">Last Period (Optional - for comparison)</h6>
                                <div class="row align-inputs-bottom">
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Total Installs (Last)</label>
                                            <InputNumber TValue="double?" @bind-Value="config.AndroidMetrics.TotalInstallsLast" class="form-control" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Daily Downloads (Last)</label>
                                            <InputNumber TValue="double?" @bind-Value="config.AndroidMetrics.DailyDownloadsLast" class="form-control" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Crash Rate per Session (Last)</label>
                                            <InputNumber TValue="double?" @bind-Value="config.AndroidMetrics.CrashRatePerSessionLast" class="form-control" />
                                        </div>
                                    </div>
                                </div>

                            }
                        </div>
                    </div>
                }


                <!-- Technical Specifications Section -->
                @if (config.IncludeTechnicalSpecifications)
                {
                    <div class="card mb-4">
                        <div class="card-header bg-dark text-white">
                            <h5 class="mb-0">Technical Specifications</h5>
                        </div>
                        <div class="card-body">
                            <div class="row align-inputs-bottom">
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">App Size</label>
                                        <InputNumber @bind-Value="config.AppSize" class="form-control" placeholder="e.g., 45.2" />
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="mb-3">
                                        <label class="form-label">Unit</label>
                                        <select @bind="config.AppSizeUnit" class="form-control">
                                            <option value="KB">KB</option>
                                            <option value="MB">MB</option>
                                            <option value="GB">GB</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Generate Button -->
                <div style="text-align: center; margin: 3rem 0;">
                    <button type="submit" class="btn btn-primary btn-lg" disabled="@isGenerating">
                        @if (isGenerating)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Generating PDF...</span>
                        }
                        else
                        {
                            <span>Generate PDF Report</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private MobileAppReportConfig config = new();
    private bool isGenerating = false;
    private bool isImporting = false;
    private string importMessage = string.Empty;
    private bool importSuccess = false;
    private bool showImportDialog = false;
    private MobileAppReportConfig? pendingImportConfig = null;
    private bool isFabMenuOpen = false;

    private void ToggleFabMenu()
    {
        isFabMenuOpen = !isFabMenuOpen;
    }

    private void ClearForm()
    {
        config = new MobileAppReportConfig();

        // Re-initialize with default download sources
        config.IOSMetrics.DownloadSources = new List<DownloadSource>
        {
            new() { Name = "App Store Search" },
            new() { Name = "Web Referrer" },
            new() { Name = "App Referrer" },
            new() { Name = "App Store Browse" },
            new() { Name = "Unavailable" }
        };

        importMessage = string.Empty;
        importSuccess = false;
        isFabMenuOpen = false;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        // Initialize with default download sources
        config.IOSMetrics.DownloadSources = new List<DownloadSource>
        {
            new() { Name = "App Store Search" },
            new() { Name = "Web Referrer" },
            new() { Name = "App Referrer" },
            new() { Name = "App Store Browse" },
            new() { Name = "Unavailable" }
        };

        // No default for report dates - user should fill in or import
    }

    private void TriggerPdfUpload()
    {
        importMessage = string.Empty;
        isFabMenuOpen = false;
        JSRuntime.InvokeVoidAsync("triggerFileUpload", "pdfFileInput");
    }

    private async Task HandlePdfImport(InputFileChangeEventArgs e)
    {
        isImporting = true;
        importMessage = string.Empty;
        StateHasChanged();

        try
        {
            var file = e.File;
            if (file == null || !file.Name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
            {
                importMessage = "Please select a valid PDF file.";
                importSuccess = false;
                return;
            }

            // Read the PDF file
            var buffer = new byte[file.Size];
            await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).ReadAsync(buffer);

            // Parse the PDF
            var parser = new PdfReportParser();
            var importedConfig = parser.ParseMobileAppReport(buffer);

            // Ensure download sources are populated
            if (!importedConfig.IOSMetrics.DownloadSources.Any())
            {
                importedConfig.IOSMetrics.DownloadSources = new List<DownloadSource>
                {
                    new() { Name = "App Store Search" },
                    new() { Name = "Web Referrer" },
                    new() { Name = "App Referrer" },
                    new() { Name = "App Store Browse" },
                    new() { Name = "Unavailable" }
                };
            }

            // Store the imported config and show the dialog
            pendingImportConfig = importedConfig;
            showImportDialog = true;
        }
        catch (Exception ex)
        {
            importMessage = $"Error importing PDF: {ex.Message}";
            importSuccess = false;
        }
        finally
        {
            isImporting = false;
            StateHasChanged();
        }
    }

    private async Task ExportConfig()
    {
        isFabMenuOpen = false;

        try
        {
            var json = System.Text.Json.JsonSerializer.Serialize(config, new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true
            });

            var fileName = $"{config.CompanyName}_Report_Config_{DateTime.Now:yyyyMMdd}.json";
            await JSRuntime.InvokeVoidAsync("downloadJson", fileName, json);
        }
        catch (Exception ex)
        {
            importMessage = $"Error exporting configuration: {ex.Message}";
            importSuccess = false;
        }
    }

    private void AddDownloadSource()
    {
        config.IOSMetrics.DownloadSources.Add(new DownloadSource());
    }

    private void RemoveDownloadSource(int index)
    {
        config.IOSMetrics.DownloadSources.RemoveAt(index);
    }

    private bool HasDownloadSourceMismatch()
    {
        var downloadSourcesTotal = GetDownloadSourcesTotal();
        var totalDownloads = config.IOSMetrics.TotalDownloads ?? 0;

        // Show warning if either value exists and they don't match
        if (downloadSourcesTotal > 0 || totalDownloads > 0)
        {
            return Math.Abs(downloadSourcesTotal - totalDownloads) > 0.01;
        }

        return false;
    }

    private double GetDownloadSourcesTotal()
    {
        return config.IOSMetrics.DownloadSources.Sum(s => s.CurrentDownloads ?? 0);
    }

    private void OnDownloadSourceChanged()
    {
        // Recalculate all download source percentages whenever values change
        config.IOSMetrics.CalculateDownloadSourcePercentages();
        StateHasChanged();
    }

    private async Task GenerateReport()
    {
        isGenerating = true;
        importMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Validate iOS download sources vs total downloads
            var downloadSourcesTotal = config.IOSMetrics.DownloadSources.Sum(s => s.CurrentDownloads ?? 0);
            var totalDownloads = config.IOSMetrics.TotalDownloads ?? 0;

            if (downloadSourcesTotal > 0 && totalDownloads > 0 && Math.Abs(downloadSourcesTotal - totalDownloads) > 0.01)
            {
                importMessage = $"⚠ Error: iOS Download Sources total ({downloadSourcesTotal:N0}) does not match Total Downloads ({totalDownloads:N0}). Please correct the values before generating the report.";
                importSuccess = false;
                isGenerating = false;
                StateHasChanged();
                return;
            }

            // Auto-calculate download source percentages before generating
            config.IOSMetrics.CalculateDownloadSourcePercentages();

            // Auto-populate platform comparison from iOS and Android data
            config.SyncPlatformComparison();

            var generator = new MobileAppReportGenerator();
            var pdfBytes = generator.GeneratePdf(config);

            // Download the PDF
            var fileName = $"{config.CompanyName}_Mobile_App_Report_{config.ReportMonth}_{config.ReportDay}_{config.ReportYear}.pdf";
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(pdfBytes));

            importMessage = "✓ PDF report generated successfully!";
            importSuccess = true;
        }
        catch (Exception ex)
        {
            importMessage = $"Error generating report: {ex.Message}";
            importSuccess = false;
            Console.WriteLine($"Error generating report: {ex.Message}\n{ex.StackTrace}");
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }

    private async Task ImportJson(InputFileChangeEventArgs e)
    {
        isImporting = true;
        importMessage = string.Empty;
        StateHasChanged();

        try
        {
            var file = e.File;
            if (file == null || !file.Name.EndsWith(".json", StringComparison.OrdinalIgnoreCase))
            {
                importMessage = "Please select a valid JSON file.";
                importSuccess = false;
                return;
            }

            // Read the JSON file
            using var stream = file.OpenReadStream(maxAllowedSize: 1 * 1024 * 1024); // 1MB max
            using var reader = new System.IO.StreamReader(stream);
            var json = await reader.ReadToEndAsync();

            // Deserialize
            var importedConfig = System.Text.Json.JsonSerializer.Deserialize<MobileAppReportConfig>(json);
            if (importedConfig != null)
            {
                // Store the imported config and show the dialog
                pendingImportConfig = importedConfig;
                showImportDialog = true;
            }
            else
            {
                importMessage = "Error: Failed to parse JSON file.";
                importSuccess = false;
            }
        }
        catch (Exception ex)
        {
            importMessage = $"Error importing JSON: {ex.Message}";
            importSuccess = false;
        }
        finally
        {
            isImporting = false;
            StateHasChanged();
        }
    }

    private void TriggerJsonUpload()
    {
        importMessage = string.Empty;
        isFabMenuOpen = false;
        JSRuntime.InvokeVoidAsync("triggerFileUpload", "jsonFileInput");
    }

    private void ImportToCurrentPeriod()
    {
        if (pendingImportConfig != null)
        {
            config = pendingImportConfig;
            importMessage = "✓ Successfully imported data to current period fields!";
            importSuccess = true;
        }

        showImportDialog = false;
        pendingImportConfig = null;
        StateHasChanged();
    }

    private void ImportToPreviousPeriod()
    {
        if (pendingImportConfig != null)
        {
            // Map current period values from imported config to last period fields in current config

            // Import company name if current is empty, otherwise keep current
            if (string.IsNullOrWhiteSpace(config.CompanyName))
            {
                config.CompanyName = pendingImportConfig.CompanyName;
            }

            // Import creator info from the imported report (they created the last report)
            config.CreatedByName = pendingImportConfig.CreatedByName;
            config.CreatedByTitle = pendingImportConfig.CreatedByTitle;

            // General info - keep current config's current period, import to last period
            config.LastReportMonth = pendingImportConfig.ReportMonth;
            config.LastReportDay = pendingImportConfig.ReportDay;
            config.LastReportYear = pendingImportConfig.ReportYear;

            // iOS Metrics - map current to last
            config.IOSMetrics.ImpressionsLast = pendingImportConfig.IOSMetrics.Impressions;
            config.IOSMetrics.ProductPageViewsLast = pendingImportConfig.IOSMetrics.ProductPageViews;
            config.IOSMetrics.ConversionRateLast = pendingImportConfig.IOSMetrics.ConversionRate;
            config.IOSMetrics.TotalDownloadsLast = pendingImportConfig.IOSMetrics.TotalDownloads;
            config.IOSMetrics.DailyDownloadsLast = pendingImportConfig.IOSMetrics.DailyDownloads;
            config.IOSMetrics.SessionsPerDeviceLast = pendingImportConfig.IOSMetrics.SessionsPerDevice;
            config.IOSMetrics.CrashRatePerSessionLast = pendingImportConfig.IOSMetrics.CrashRatePerSession;
            config.IOSMetrics.TotalCrashesLast = pendingImportConfig.IOSMetrics.TotalCrashes;

            // Download sources - map current to last
            for (int i = 0; i < Math.Min(config.IOSMetrics.DownloadSources.Count, pendingImportConfig.IOSMetrics.DownloadSources.Count); i++)
            {
                config.IOSMetrics.DownloadSources[i].LastDownloads = pendingImportConfig.IOSMetrics.DownloadSources[i].CurrentDownloads;
                config.IOSMetrics.DownloadSources[i].LastPercentage = pendingImportConfig.IOSMetrics.DownloadSources[i].CurrentPercentage;
            }

            // Android Metrics - map current to last
            config.AndroidMetrics.TotalInstallsLast = pendingImportConfig.AndroidMetrics.TotalInstalls;
            config.AndroidMetrics.DailyDownloadsLast = pendingImportConfig.AndroidMetrics.DailyDownloads;
            config.AndroidMetrics.CrashRatePerSessionLast = pendingImportConfig.AndroidMetrics.CrashRatePerSession;

            // Enable last period data if not already enabled
            config.IncludeLastPeriodData = true;

            importMessage = "✓ Successfully imported data to previous period fields!";
            importSuccess = true;
        }

        showImportDialog = false;
        pendingImportConfig = null;
        StateHasChanged();
    }

    private void CancelImport()
    {
        showImportDialog = false;
        pendingImportConfig = null;
        importMessage = "Import cancelled.";
        importSuccess = false;
        StateHasChanged();
    }

    private string FormatChange(double? value)
    {
        if (!value.HasValue)
            return "-";

        var sign = value.Value >= 0 ? "+" : "";
        return $"{sign}{value.Value:N2}%";
    }
}
