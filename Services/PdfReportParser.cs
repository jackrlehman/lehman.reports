using iText.Kernel.Pdf;
using iText.Kernel.Pdf.Canvas.Parser;
using iText.Kernel.Pdf.Canvas.Parser.Listener;
using ReportBuilder.Models;
using System.Text.Json;
using System.Text.RegularExpressions;

namespace ReportBuilder.Services;

public class PdfReportParser
{
    public MobileAppReportConfig ParseMobileAppReport(byte[] pdfBytes)
    {
        try
        {
            using var ms = new MemoryStream(pdfBytes);
            ms.Position = 0; // Ensure we're at the start

            var readerProperties = new iText.Kernel.Pdf.ReaderProperties();
            using var pdfReader = new PdfReader(ms, readerProperties);
            using var pdfDoc = new PdfDocument(pdfReader);

            // Extract text from all pages to find our JSON marker
            var fullText = string.Empty;
            for (int i = 1; i <= pdfDoc.GetNumberOfPages(); i++)
            {
                var page = pdfDoc.GetPage(i);
                var strategy = new SimpleTextExtractionStrategy();
                fullText += PdfTextExtractor.GetTextFromPage(page, strategy) + "\n";
            }

            // Look for our JSON marker: <!--REPORT_CONFIG_JSON:{...}-->
            var jsonMatch = Regex.Match(fullText, @"<!--REPORT_CONFIG_JSON:(.+?)-->", RegexOptions.Singleline);

            string? configJson = null;

            if (jsonMatch.Success)
            {
                configJson = jsonMatch.Groups[1].Value;
            }

            if (string.IsNullOrEmpty(configJson))
            {
                throw new InvalidOperationException(
                    "This PDF does not contain embedded report configuration data. " +
                    "Only PDFs generated by this application can be imported.");
            }

            // Deserialize the JSON back to config object
            var config = JsonSerializer.Deserialize<MobileAppReportConfig>(configJson);

            if (config == null)
            {
                throw new InvalidOperationException("Failed to deserialize report configuration from PDF metadata.");
            }

            // Don't automatically map - let the user choose via the import dialog
            return config;
        }
        catch (Exception ex) when (ex is not InvalidOperationException)
        {
            throw new InvalidOperationException(
                $"Unable to read PDF file. The file may be corrupted or incompatible. Error: {ex.Message}", ex);
        }
    }


    private void MapCurrentToLast(MobileAppReportConfig config)
    {
        // Map the current period values from the imported report to the "last" period values
        // This allows you to import last month's report and have it pre-fill the comparison values

        // Move the current report dates to last report dates
        config.LastReportMonth = config.ReportMonth;
        config.LastReportDay = config.ReportDay;
        config.LastReportYear = config.ReportYear;

        // Clear current date so user fills in new month
        if (config.ReportYear.HasValue && config.ReportMonth.HasValue && config.ReportDay.HasValue)
        {
            var nextMonth = new DateTime(config.ReportYear.Value, config.ReportMonth.Value, config.ReportDay.Value).AddMonths(1);
            config.ReportMonth = nextMonth.Month;
            config.ReportDay = nextMonth.Day;
            config.ReportYear = nextMonth.Year;
        }

        // iOS Metrics - move current to last
        config.IOSMetrics.ImpressionsLast = config.IOSMetrics.Impressions;
        config.IOSMetrics.ProductPageViewsLast = config.IOSMetrics.ProductPageViews;
        config.IOSMetrics.ConversionRateLast = config.IOSMetrics.ConversionRate;
        config.IOSMetrics.TotalDownloadsLast = config.IOSMetrics.TotalDownloads;
        config.IOSMetrics.DailyDownloadsLast = config.IOSMetrics.DailyDownloads;
        config.IOSMetrics.SessionsPerDeviceLast = config.IOSMetrics.SessionsPerDevice;
        config.IOSMetrics.CrashRatePerSessionLast = config.IOSMetrics.CrashRatePerSession;
        config.IOSMetrics.TotalCrashesLast = config.IOSMetrics.TotalCrashes;

        // Clear current values (change values are computed properties, don't need to clear)
        config.IOSMetrics.Impressions = null;
        config.IOSMetrics.ProductPageViews = null;
        config.IOSMetrics.ConversionRate = null;
        config.IOSMetrics.TotalDownloads = null;
        config.IOSMetrics.DailyDownloads = null;
        config.IOSMetrics.SessionsPerDevice = null;
        config.IOSMetrics.CrashRatePerSession = null;
        config.IOSMetrics.TotalCrashes = null;

        // Download Sources - move current to last
        foreach (var source in config.IOSMetrics.DownloadSources)
        {
            source.LastPercentage = source.CurrentPercentage;
            source.LastDownloads = source.CurrentDownloads;
            source.CurrentPercentage = null;
            source.CurrentDownloads = null;
        }

        // Android Metrics - move current to last
        config.AndroidMetrics.TotalInstallsLast = config.AndroidMetrics.TotalInstalls;
        config.AndroidMetrics.DailyDownloadsLast = config.AndroidMetrics.DailyDownloads;
        config.AndroidMetrics.CrashRatePerSessionLast = config.AndroidMetrics.CrashRatePerSession;

        config.AndroidMetrics.TotalInstalls = null;
        config.AndroidMetrics.DailyDownloads = null;
        config.AndroidMetrics.CrashRatePerSession = null;

        // Platform Comparison - move current to last
        config.PlatformComparison.IOSTotalDownloadsLast = config.PlatformComparison.IOSTotalDownloads;
        config.PlatformComparison.AndroidTotalDownloadsLast = config.PlatformComparison.AndroidTotalDownloads;
        config.PlatformComparison.IOSUserPercentLast = config.PlatformComparison.IOSUserPercent;
        config.PlatformComparison.AndroidUserPercentLast = config.PlatformComparison.AndroidUserPercent;
        config.PlatformComparison.IOSDailyDownloadsLast = config.PlatformComparison.IOSDailyDownloads;
        config.PlatformComparison.AndroidDailyDownloadsLast = config.PlatformComparison.AndroidDailyDownloads;
        config.PlatformComparison.IOSCrashRateLast = config.PlatformComparison.IOSCrashRate;
        config.PlatformComparison.AndroidCrashRateLast = config.PlatformComparison.AndroidCrashRate;

        config.PlatformComparison.IOSTotalDownloads = null;
        config.PlatformComparison.AndroidTotalDownloads = null;
        config.PlatformComparison.IOSUserPercent = null;
        config.PlatformComparison.AndroidUserPercent = null;
        config.PlatformComparison.IOSDailyDownloads = null;
        config.PlatformComparison.AndroidDailyDownloads = null;
        config.PlatformComparison.IOSCrashRate = null;
        config.PlatformComparison.AndroidCrashRate = null;
    }
}
